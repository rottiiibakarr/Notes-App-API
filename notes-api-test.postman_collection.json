{
	"info": {
		"_postman_id": "4127b576-1e96-4156-9fa1-5f62d5432509",
		"name": "Notes API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "46412621",
		"_collection_link": "https://naufal-4931593.postman.co/workspace/Naufal's-Workspace~b551c800-21c0-4818-83ae-f59c567d64db/collection/46412621-4127b576-1e96-4156-9fa1-5f62d5432509?action=share&source=collection_link&creator=46412621"
	},
	"item": [
		{
			"name": "localhost:5000/notes",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Catatan A\",\r\n    \"tags\": [\"Android\", \"Web\"],\r\n    \"body\": \"Isi catatan A\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/notes",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:5000/notes",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:5000/notes",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:5000/notes/vG7-qadVrYCZwjav",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:5000/notes/{{noteID}}",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:5000/notes/vG7-qadVrYCZwjav",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Mein Kampf\",\r\n    \"tags\": [\"Leadership\", \"Military\", \"Painter\", \"Austrian\"],\r\n    \"body\": \"Sebuah pemimpin Jerman yang gagal masuk ke sekolah seni!\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/notes/{{noteID}}",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "localhost:5000/notes/PnExb8rtuA7qdYFb",
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Mein Kampf\",\r\n    \"tags\": [\"Leadership\", \"Military\", \"Painter\", \"Austrian\"],\r\n    \"body\": \"Sebuah pemimpin Jerman yang gagal masuk ke sekolah seni!\"\r\n}"
				},
				"url": {
					"raw": "localhost:5000/notes/PnExb8rtuA7qdYFb",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes",
						"PnExb8rtuA7qdYFb"
					]
				}
			},
			"response": []
		},
		{
			"name": "Adding Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 201 value', () => {\r",
							"   pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"}); \r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"\r",
							"    pm.expect(responseJson).to.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('Catatan berhasil ditambahkan');\r",
							"    \r",
							"    pm.expect(responseJson).to.ownProperty('data');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"}); \r",
							"\r",
							"pm.test('response body data should have noteId property and not equal to empty', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							" \r",
							"    pm.expect(data).to.ownProperty('noteId');\r",
							"    pm.expect(data.noteId).to.not.equals('');\r",
							" \r",
							"    pm.environment.set('noteId', data.noteId);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Catatan A\",\r\n    \"tags\": [\"Android\", \"Web\"],\r\n    \"body\": \"Isi dari catatan A\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/notes",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Getting All Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {\r",
							"   pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"   pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"}); \r",
							"\r",
							"pm.test('response body should an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have the correct property and value', () => {\r",
							"  const responseJson = pm.response.json();\r",
							"\r",
							"   pm.expect(responseJson).to.have.ownProperty('status');\r",
							"   pm.expect(responseJson.status).to.equals('success');\r",
							"\r",
							"   pm.expect(responseJson).to.have.ownProperty('data');\r",
							"   pm.expect(responseJson.data).to.be.an('object');\r",
							"}); \r",
							"\r",
							"pm.test('response body data should have a notes array and contain at least 1 item', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							"\r",
							"    pm.expect(data).to.have.ownProperty('notes');\r",
							"    pm.expect(data.notes).to.be.an('array');\r",
							"    pm.expect(data.notes).lengthOf.at.least(1);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "localhost:5000/notes",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Getting Specified Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have the correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.have.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"\r",
							"    pm.expect(responseJson).to.have.ownProperty('data');\r",
							"    pm.expect(responseJson.data).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body data should contain note object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data } = responseJson;\r",
							"\r",
							"    pm.expect(data).to.have.ownProperty('note');\r",
							"    pm.expect(data.note).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('note object should contain correct value for id, title, body, and tags property', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    const { data: { note } } = responseJson;\r",
							"\r",
							"    const expectedId = pm.environment.get('noteId');\r",
							"    const expectedTitle = 'Catatan A';\r",
							"    const expectedTags = ['Android', 'Web'];\r",
							"    const expectedBody = 'Isi dari catatan A';\r",
							"\r",
							"    pm.expect(note).to.have.ownProperty('id');\r",
							"    pm.expect(note.id).to.equals(expectedId);\r",
							"\r",
							"    pm.expect(note).to.have.ownProperty('title');\r",
							"    pm.expect(note.title).to.equals(expectedTitle);\r",
							"\r",
							"    pm.expect(note).to.have.ownProperty('tags');\r",
							"    pm.expect(note.tags).to.eql(expectedTags);\r",
							"\r",
							"    pm.expect(note).to.have.ownProperty('body');\r",
							"    pm.expect(note.body).to.equals(expectedBody);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/notes/{{noteId}}",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals(\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.have.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"\r",
							"    pm.expect(responseJson).to.have.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('Catatan berhasil diperbarui');\r",
							"});\r",
							"\r",
							"pm.test('when request the updated note', () => {\r",
							"    const noteId = pm.environment.get('noteId');\r",
							"\r",
							"    pm.sendRequest(`http://localhost:5000/notes/${noteId}`, (error, response) => {\r",
							"        if (!error) {\r",
							"            pm.test('then the updated note should contain the latest data', () => {\r",
							"                const responseJson = response.json();\r",
							"                const { data: { note } } = responseJson;\r",
							"\r",
							"                const expectedTitle = 'Mein Kampf';\r",
							"                const expectedTags = ['Leadership', 'Military', 'Painter', 'Austrian'];\r",
							"                const expectedBody = 'Seorang pemimpin Jerman yang gagal masuk ke sekolah seni!';\r",
							"\r",
							"                pm.expect(note.title).to.equals(expectedTitle);\r",
							"                pm.expect(note.tags).to.eql(expectedTags);\r",
							"                pm.expect(note.body).to.equals(expectedBody);\r",
							"            })\r",
							"        }\r",
							"\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Mein Kampf\",\r\n    \"tags\": [\r\n        \"Leadership\",\r\n        \"Military\",\r\n        \"Painter\",\r\n        \"Austrian\"\r\n    ],\r\n    \"body\": \"Seorang pemimpin Jerman yang gagal masuk ke sekolah seni!\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/notes/{{noteId}}",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('response status code should have 200 value', () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('response Content-Type header should have application/json value', () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8')\r",
							"});\r",
							"\r",
							"pm.test('response body should be an object', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test('response body should have correct property and value', () => {\r",
							"    const responseJson = pm.response.json();\r",
							"\r",
							"    pm.expect(responseJson).to.have.ownProperty('status');\r",
							"    pm.expect(responseJson.status).to.equals('success');\r",
							"\r",
							"    pm.expect(responseJson).to.have.ownProperty('message');\r",
							"    pm.expect(responseJson.message).to.equals('Catatan berhasil dihapus');\r",
							"});\r",
							"\r",
							"pm.test('when request the deleted note', () => {\r",
							"    const noteId = pm.environment.get('noteId');\r",
							"    pm.sendRequest(`http://localhost:5000/notes/${noteId}`, (error, response) => {\r",
							"        if (!error) {\r",
							"            pm.test('the deleted note should be not found', () => {\r",
							"                pm.expect(response.code).to.equals(404);\r",
							"                const responseJson = response.json();\r",
							"                pm.expect(responseJson.status).to.equals('fail');\r",
							"                pm.expect(responseJson.message).to.equals('Catatan tidak ditemukan');\r",
							"            });\r",
							"        }\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "localhost:5000/notes/{{noteId}}",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "noteid",
			"value": "",
			"type": "string"
		}
	]
}